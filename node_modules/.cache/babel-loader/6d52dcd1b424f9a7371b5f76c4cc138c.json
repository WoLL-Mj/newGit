{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectSpread from \"/Users/wanglong/wl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/Users/wanglong/wl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/wanglong/wl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/wanglong/wl/src/template/InfoChartHook/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport axios from 'axios';\nimport ReactDataSheet from 'react-datasheet';\nimport 'react-datasheet/lib/react-datasheet.css';\nimport './index.css';\nexport default function InfoChartHook() {\n  _s();\n\n  var _useState = useState([[{\n    value: 1\n  }, {\n    value: 3\n  }], [{\n    value: 2\n  }, {\n    value: 4\n  }]]),\n      _useState2 = _slicedToArray(_useState, 2),\n      grid = _useState2[0],\n      setGrig = _useState2[1];\n\n  var onCellsChanged = function onCellsChanged(changes) {\n    return changes.forEach(function (_ref) {\n      var cell = _ref.cell,\n          row = _ref.row,\n          col = _ref.col,\n          value = _ref.value;\n      debugger;\n      grid[row][col].value = parseInt(value);\n      grid[row][col].expr = value;\n      console.log(\"New expression :\" + value);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n    data: grid,\n    valueRenderer: function valueRenderer(cell) {\n      return cell.value;\n    },\n    onCellsChanged: function onCellsChanged(changes) {\n      var grid1 = grid.map(function (row) {\n        return _toConsumableArray(row);\n      });\n      changes.forEach(function (_ref2) {\n        var cell = _ref2.cell,\n            row = _ref2.row,\n            col = _ref2.col,\n            value = _ref2.value;\n        debugger;\n        grid1[row][col] = _objectSpread(_objectSpread({}, grid1[row][col]), {}, {\n          value: value\n        });\n      });\n      debugger;\n      setGrig(grid);\n    } // onCellsChanged={onCellsChanged}\n    // attributesRenderer={(cell) => {'data-hint': cell.hint || {}}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InfoChartHook, \"ji3up36G8mIhu+5peswAw+t4420=\");\n\n_c = InfoChartHook;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoChartHook\");","map":{"version":3,"sources":["/Users/wanglong/wl/src/template/InfoChartHook/index.js"],"names":["React","useState","Form","Input","Button","Checkbox","axios","ReactDataSheet","InfoChartHook","value","grid","setGrig","onCellsChanged","changes","forEach","cell","row","col","parseInt","expr","console","log","grid1","map"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,QAA9B,QAA8C,MAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAO,yCAAP;AACA,OAAO,aAAP;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AAAA,kBACdP,QAAQ,CAAC,CAC/B,CAAC;AAAEQ,IAAAA,KAAK,EAAE;AAAT,GAAD,EAAe;AAAEA,IAAAA,KAAK,EAAE;AAAT,GAAf,CAD+B,EAE/B,CAAC;AAAEA,IAAAA,KAAK,EAAE;AAAT,GAAD,EAAe;AAAEA,IAAAA,KAAK,EAAE;AAAT,GAAf,CAF+B,CAAD,CADM;AAAA;AAAA,MAC/BC,IAD+B;AAAA,MACzBC,OADyB;;AAKtC,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD;AAAA,WAAaA,OAAO,CAACC,OAAR,CAAgB,gBAA6B;AAAA,UAA3BC,IAA2B,QAA3BA,IAA2B;AAAA,UAArBC,GAAqB,QAArBA,GAAqB;AAAA,UAAhBC,GAAgB,QAAhBA,GAAgB;AAAA,UAAXR,KAAW,QAAXA,KAAW;AAC/E;AACAC,MAAAA,IAAI,CAACM,GAAD,CAAJ,CAAUC,GAAV,EAAeR,KAAf,GAAuBS,QAAQ,CAACT,KAAD,CAA/B;AACAC,MAAAA,IAAI,CAACM,GAAD,CAAJ,CAAUC,GAAV,EAAeE,IAAf,GAAsBV,KAAtB;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBZ,KAAjC;AACD,KALmC,CAAb;AAAA,GAAvB;;AAMA,sBACE,QAAC,cAAD;AACE,IAAA,IAAI,EAAEC,IADR;AAEE,IAAA,aAAa,EAAE,uBAACK,IAAD,EAAU;AACvB,aAAOA,IAAI,CAACN,KAAZ;AACD,KAJH;AAKE,IAAA,cAAc,EAAE,wBAAAI,OAAO,EAAI;AACzB,UAAMS,KAAK,GAAGZ,IAAI,CAACa,GAAL,CAAS,UAAAP,GAAG;AAAA,kCAAQA,GAAR;AAAA,OAAZ,CAAd;AACAH,MAAAA,OAAO,CAACC,OAAR,CAAgB,iBAA+B;AAAA,YAA5BC,IAA4B,SAA5BA,IAA4B;AAAA,YAAtBC,GAAsB,SAAtBA,GAAsB;AAAA,YAAjBC,GAAiB,SAAjBA,GAAiB;AAAA,YAAZR,KAAY,SAAZA,KAAY;AAC7C;AACAa,QAAAA,KAAK,CAACN,GAAD,CAAL,CAAWC,GAAX,oCAAuBK,KAAK,CAACN,GAAD,CAAL,CAAWC,GAAX,CAAvB;AAAwCR,UAAAA,KAAK,EAAEA;AAA/C;AACD,OAHD;AAIA;AACAE,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAbH,CAcE;AACA;;AAfF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GA9BuBF,a;;KAAAA,a","sourcesContent":["import React, { useState } from 'react'\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport axios from 'axios'\nimport ReactDataSheet from 'react-datasheet'\nimport 'react-datasheet/lib/react-datasheet.css'\nimport './index.css'\n\nexport default function InfoChartHook() {\n  const [grid, setGrig] = useState([\n    [{ value: 1 }, { value: 3 }],\n    [{ value: 2 }, { value: 4 }],\n  ])\n  const onCellsChanged = (changes) => changes.forEach(({cell, row, col, value}) => {\n    debugger\n    grid[row][col].value = parseInt(value)\n    grid[row][col].expr = value\n    console.log(\"New expression :\" + value)\n  })\n  return (\n    <ReactDataSheet\n      data={grid}\n      valueRenderer={(cell) => {\n        return cell.value\n      }}\n      onCellsChanged={changes => {\n        const grid1 = grid.map(row => [...row]);\n        changes.forEach(({ cell, row, col, value }) => {\n          debugger\n          grid1[row][col] = { ...grid1[row][col], value: value};\n        })\n        debugger\n        setGrig(grid)\n      }}\n      // onCellsChanged={onCellsChanged}\n      // attributesRenderer={(cell) => {'data-hint': cell.hint || {}}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}