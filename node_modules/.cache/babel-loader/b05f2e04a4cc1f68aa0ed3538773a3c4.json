{"ast":null,"code":"import _objectSpread from \"/Users/wanglong/wl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/wanglong/wl/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/wanglong/wl/src/template/InfoChartHook/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport axios from 'axios';\nimport ReactDataSheet from 'react-datasheet';\nimport 'react-datasheet/lib/react-datasheet.css';\nimport './index.css';\nexport default function InfoChartHook() {\n  _s();\n\n  var _useState = useState([[{\n    value: 5,\n    component: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return console.log(\"clicked\");\n      },\n      children: \"Rendered\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this)\n  }] // [{ value: 1 }, { value: 3 }],\n  // [{ value: 2 }, { value: 4 }],\n  ]),\n      _useState2 = _slicedToArray(_useState, 2),\n      grid = _useState2[0],\n      setGrig = _useState2[1];\n\n  var onCellsChanged = function onCellsChanged(changes) {\n    return changes.forEach(function (_ref) {\n      var cell = _ref.cell,\n          row = _ref.row,\n          col = _ref.col,\n          value = _ref.value;\n      debugger;\n      grid[row][col].value = parseInt(value);\n      grid[row][col].expr = value;\n      console.log(\"New expression :\" + value);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n    data: grid,\n    valueRenderer: function valueRenderer(cell) {\n      return cell.value;\n    },\n    onCellsChanged: function onCellsChanged(changes) {\n      changes.forEach(function (_ref2) {\n        var cell = _ref2.cell,\n            row = _ref2.row,\n            col = _ref2.col,\n            value = _ref2.value;\n        grid[row][col] = _objectSpread(_objectSpread({}, grid[row][col]), {}, {\n          value\n        });\n      });\n      setGrig(grid);\n    } // onCellsChanged={onCellsChanged}\n    // attributesRenderer={(cell) => {'data-hint': cell.hint || {}}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InfoChartHook, \"cuJClwpfYknPdl7YnNzYHtS7pnk=\");\n\n_c = InfoChartHook;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoChartHook\");","map":{"version":3,"sources":["/Users/wanglong/wl/src/template/InfoChartHook/index.js"],"names":["React","useState","Form","Input","Button","Checkbox","axios","ReactDataSheet","InfoChartHook","value","component","console","log","grid","setGrig","onCellsChanged","changes","forEach","cell","row","col","parseInt","expr"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,QAA9B,QAA8C,MAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAO,yCAAP;AACA,OAAO,aAAP;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AAAA,kBACdP,QAAQ,CAAC,CAC/B,CAAC;AACCQ,IAAAA,KAAK,EAAG,CADT;AAECC,IAAAA,SAAS,eACP;AAAQ,MAAA,OAAO,EAAE;AAAA,eAAMC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAN;AAAA,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHH,GAAD,CAD+B,CAS/B;AACA;AAV+B,GAAD,CADM;AAAA;AAAA,MAC/BC,IAD+B;AAAA,MACzBC,OADyB;;AAatC,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD;AAAA,WAAaA,OAAO,CAACC,OAAR,CAAgB,gBAA6B;AAAA,UAA3BC,IAA2B,QAA3BA,IAA2B;AAAA,UAArBC,GAAqB,QAArBA,GAAqB;AAAA,UAAhBC,GAAgB,QAAhBA,GAAgB;AAAA,UAAXX,KAAW,QAAXA,KAAW;AAC/E;AACAI,MAAAA,IAAI,CAACM,GAAD,CAAJ,CAAUC,GAAV,EAAeX,KAAf,GAAuBY,QAAQ,CAACZ,KAAD,CAA/B;AACAI,MAAAA,IAAI,CAACM,GAAD,CAAJ,CAAUC,GAAV,EAAeE,IAAf,GAAsBb,KAAtB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBH,KAAjC;AACD,KALmC,CAAb;AAAA,GAAvB;;AAMA,sBACE,QAAC,cAAD;AACE,IAAA,IAAI,EAAEI,IADR;AAEE,IAAA,aAAa,EAAE,uBAACK,IAAD,EAAU;AACvB,aAAOA,IAAI,CAACT,KAAZ;AACD,KAJH;AAKE,IAAA,cAAc,EAAE,wBAAAO,OAAO,EAAI;AACzBA,MAAAA,OAAO,CAACC,OAAR,CAAgB,iBAA+B;AAAA,YAA5BC,IAA4B,SAA5BA,IAA4B;AAAA,YAAtBC,GAAsB,SAAtBA,GAAsB;AAAA,YAAjBC,GAAiB,SAAjBA,GAAiB;AAAA,YAAZX,KAAY,SAAZA,KAAY;AAC7CI,QAAAA,IAAI,CAACM,GAAD,CAAJ,CAAUC,GAAV,oCAAsBP,IAAI,CAACM,GAAD,CAAJ,CAAUC,GAAV,CAAtB;AAAsCX,UAAAA;AAAtC;AACD,OAFD;AAGAK,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAVH,CAWE;AACA;;AAZF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAnCuBL,a;;KAAAA,a","sourcesContent":["import React, { useState } from 'react'\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport axios from 'axios'\nimport ReactDataSheet from 'react-datasheet'\nimport 'react-datasheet/lib/react-datasheet.css'\nimport './index.css'\n\nexport default function InfoChartHook() {\n  const [grid, setGrig] = useState([\n    [{\n      value:  5,\n      component: (\n        <button onClick={() => console.log(\"clicked\")}>\n          Rendered\n        </button>\n      )\n    }]\n    // [{ value: 1 }, { value: 3 }],\n    // [{ value: 2 }, { value: 4 }],\n  ])\n  const onCellsChanged = (changes) => changes.forEach(({cell, row, col, value}) => {\n    debugger\n    grid[row][col].value = parseInt(value)\n    grid[row][col].expr = value\n    console.log(\"New expression :\" + value)\n  })\n  return (\n    <ReactDataSheet\n      data={grid}\n      valueRenderer={(cell) => {\n        return cell.value\n      }}\n      onCellsChanged={changes => {\n        changes.forEach(({ cell, row, col, value }) => {\n          grid[row][col] = { ...grid[row][col], value }\n        })\n        setGrig(grid)\n      }}\n      // onCellsChanged={onCellsChanged}\n      // attributesRenderer={(cell) => {'data-hint': cell.hint || {}}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}